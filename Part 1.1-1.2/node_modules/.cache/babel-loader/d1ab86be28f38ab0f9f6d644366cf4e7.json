{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/victorli/WebstormProjects/FullStackOpen/Part 1.1-1.2/src/App.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nconst course = 'Half Stack application development';\nconst part1 = 'I don\\'t even remember';\nconst exercises1 = 10;\nconst part2 = 'Using props to pass data';\nconst exercises2 = 7;\nconst part3 = 'State of a component';\nconst exercises3 = 14;\n/*\n1.1 We want to refactor this code in a manner that uses Components and Properties\n1.2 The Content Component should be rendered to 3 \"Part\" components\n\nCreate an array with three separate dictionaries to contain all the necessary information and use it to create our\ncomponents\n */\n// Three New that are separated from one another Components \"Header\", \"Content\", and \"Total\"\n\nconst Header = props => {\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: props.course.name\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n}; // So we can split our Content Component's properties into their own separate \"Part\"\n\n\n_c = Header;\n\nconst Part = props => {\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [props.name, props.exercises]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 12\n  }, this);\n};\n\n_c2 = Part;\n\nconst Content = props => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Part, {\n      name: props.parts[0].name,\n      exercise: props.parts[0].exercises\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 10\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 6\n  }, this);\n};\n\n_c3 = Content;\n\nconst Total = props => {\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Number of Exercises are \", props.parts[0].exercises + props.parts[1].exercises + props.parts[2].exercises]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n};\n\n_c4 = Total;\n\nconst App = () => {\n  // Create a dictionary that contains an array that separates its own dictionaries\n  const course = {\n    name: \"Half Stack application development\",\n    parts: [{\n      name: 'Fundamentals of React',\n      exercises: 10\n    }, {\n      name: 'Using props to pass data',\n      exercises: 7\n    }, {\n      name: 'State of a component',\n      exercises: 14\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      course: course\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Content, {\n      parts: course.parts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Total, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n};\n\n_c5 = App;\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 81,\n  columnNumber: 17\n}, this), document.getElementById('root'));\nexport default App;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"Header\");\n$RefreshReg$(_c2, \"Part\");\n$RefreshReg$(_c3, \"Content\");\n$RefreshReg$(_c4, \"Total\");\n$RefreshReg$(_c5, \"App\");","map":{"version":3,"sources":["/Users/victorli/WebstormProjects/FullStackOpen/Part 1.1-1.2/src/App.js"],"names":["React","ReactDOM","course","part1","exercises1","part2","exercises2","part3","exercises3","Header","props","name","Part","exercises","Content","parts","Total","App","render","document","getElementById"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AAEA,MAAMC,MAAM,GAAG,oCAAf;AACA,MAAMC,KAAK,GAAG,wBAAd;AACA,MAAMC,UAAU,GAAG,EAAnB;AACA,MAAMC,KAAK,GAAG,0BAAd;AACA,MAAMC,UAAU,GAAG,CAAnB;AACA,MAAMC,KAAK,GAAG,sBAAd;AACA,MAAMC,UAAU,GAAG,EAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;AACA,MAAMC,MAAM,GAAIC,KAAD,IAAW;AACtB,sBACA;AAAA,cAAKA,KAAK,CAACR,MAAN,CAAaS;AAAlB;AAAA;AAAA;AAAA;AAAA,UADA;AAGH,CAJD,C,CAMA;;;KANMF,M;;AAQN,MAAMG,IAAI,GAAIF,KAAD,IAAW;AACpB,sBAAO;AAAA,eACFA,KAAK,CAACC,IADJ,EACUD,KAAK,CAACG,SADhB;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAGH,CAJD;;MAAMD,I;;AAMN,MAAME,OAAO,GAAIJ,KAAD,IAAW;AACvB,sBACC;AAAA,2BACI,QAAC,IAAD;AAAM,MAAA,IAAI,EAAEA,KAAK,CAACK,KAAN,CAAY,CAAZ,EAAeJ,IAA3B;AAAiC,MAAA,QAAQ,EAAED,KAAK,CAACK,KAAN,CAAY,CAAZ,EAAeF;AAA1D;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADD;AAKH,CAND;;MAAMC,O;;AAQN,MAAME,KAAK,GAAIN,KAAD,IAAW;AACrB,sBACI;AAAA,2CAA4BA,KAAK,CAACK,KAAN,CAAY,CAAZ,EAAeF,SAAf,GAA2BH,KAAK,CAACK,KAAN,CAAY,CAAZ,EAAeF,SAA1C,GAAsDH,KAAK,CAACK,KAAN,CAAY,CAAZ,EAAeF,SAAjG;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH,CAJD;;MAAMG,K;;AAKN,MAAMC,GAAG,GAAG,MAAM;AAEd;AACJ,QAAMf,MAAM,GAAG;AACXS,IAAAA,IAAI,EAAE,oCADK;AAEXI,IAAAA,KAAK,EAAE,CACH;AACIJ,MAAAA,IAAI,EAAE,uBADV;AAEIE,MAAAA,SAAS,EAAE;AAFf,KADG,EAKH;AACIF,MAAAA,IAAI,EAAE,0BADV;AAEIE,MAAAA,SAAS,EAAE;AAFf,KALG,EASH;AACIF,MAAAA,IAAI,EAAE,sBADV;AAEIE,MAAAA,SAAS,EAAE;AAFf,KATG;AAFI,GAAf;AAmBI,sBACI;AAAA,4BACI,QAAC,MAAD;AAAQ,MAAA,MAAM,EAAEX;AAAhB;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,OAAD;AAAS,MAAA,KAAK,EAAEA,MAAM,CAACa;AAAvB;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CA9BD;;MAAME,G;AAgCNhB,QAAQ,CAACiB,MAAT,eAAgB,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA,QAAhB,EAAyBC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAzB;AAEA,eAAeH,GAAf","sourcesContent":["import React from 'react'\nimport ReactDOM from 'react-dom'\n\nconst course = 'Half Stack application development'\nconst part1 = 'I don\\'t even remember'\nconst exercises1 = 10\nconst part2 = 'Using props to pass data'\nconst exercises2 = 7\nconst part3 = 'State of a component'\nconst exercises3 = 14\n\n/*\n1.1 We want to refactor this code in a manner that uses Components and Properties\n1.2 The Content Component should be rendered to 3 \"Part\" components\n\nCreate an array with three separate dictionaries to contain all the necessary information and use it to create our\ncomponents\n */\n\n\n// Three New that are separated from one another Components \"Header\", \"Content\", and \"Total\"\nconst Header = (props) => {\n    return(\n    <h1>{props.course.name}</h1>\n    )\n}\n\n// So we can split our Content Component's properties into their own separate \"Part\"\n\nconst Part = (props) => {\n    return(<p>\n        {props.name}{props.exercises}\n    </p>)\n}\n\nconst Content = (props) => {\n    return(\n     <div>\n         <Part name={props.parts[0].name} exercise={props.parts[0].exercises}/>\n     </div>\n)\n}\n\nconst Total = (props) => {\n    return(\n        <p>Number of Exercises are {props.parts[0].exercises + props.parts[1].exercises + props.parts[2].exercises}</p>\n    )\n}\nconst App = () => {\n\n    // Create a dictionary that contains an array that separates its own dictionaries\nconst course = {\n    name: \"Half Stack application development\",\n    parts: [\n        {\n            name: 'Fundamentals of React',\n            exercises: 10\n        },\n        {\n            name: 'Using props to pass data',\n            exercises: 7\n        },\n        {\n            name: 'State of a component',\n            exercises: 14\n        }\n\n    ]\n}\n\n    return (\n        <div>\n            <Header course={course} />\n            <Content parts={course.parts}/>\n            <Total/>\n\n        </div>\n    )\n}\n\nReactDOM.render(<App />, document.getElementById('root'))\n\nexport default App;\n\n"]},"metadata":{},"sourceType":"module"}